import { useState } from 'react';
import { useLocation } from 'wouter';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { 
  ArrowLeft, 
  ArrowRight, 
  Settings, 
  Users, 
  Mic, 
  Layout,
  Sparkles,
  Wand2
} from 'lucide-react';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

const quizSettingsSchema = z.object({
  title: z.string().min(1, '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'),
  description: z.string().optional(),
  template: z.string().optional(),
  minPlayers: z.number().min(1, '–ú–∏–Ω–∏–º—É–º 1 –∏–≥—Ä–æ–∫').max(100),
  maxPlayers: z.number().min(1, '–ú–∏–Ω–∏–º—É–º 1 –∏–≥—Ä–æ–∫').max(100),
  timeLimit: z.number().min(5, '–ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥').max(300, '–ú–∞–∫—Å–∏–º—É–º 300 —Å–µ–∫—É–Ω–¥'),
  useAudioNarration: z.boolean(),
  aiVoice: z.string().optional(),
  isPublic: z.boolean(),
  questionTemplate: z.string().optional(),
});

type QuizSettings = z.infer<typeof quizSettingsSchema>;

const QUIZ_TEMPLATES = [
  { 
    id: 'blank', 
    name: '–ü—É—Å—Ç–æ–π –∫–≤–∏–∑', 
    description: '–ù–∞—á–Ω–∏—Ç–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞',
    icon: 'üìù',
    color: 'bg-gray-100 text-gray-800'
  },
  { 
    id: 'educational', 
    name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π', 
    description: '–®–∞–±–ª–æ–Ω –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö –∫–≤–∏–∑–æ–≤',
    icon: 'üéì',
    color: 'bg-blue-100 text-blue-800'
  },
  { 
    id: 'trivia', 
    name: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞', 
    description: '–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
    icon: 'üß†',
    color: 'bg-purple-100 text-purple-800'
  },
  { 
    id: 'corporate', 
    name: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', 
    description: '–î–ª—è —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤ –∏ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –∏–≥—Ä',
    icon: 'üíº',
    color: 'bg-green-100 text-green-800'
  },
  { 
    id: 'kids', 
    name: '–î–µ—Ç—Å–∫–∏–π', 
    description: '–í–µ—Å–µ–ª—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ—Ç–µ–π',
    icon: 'üéà',
    color: 'bg-yellow-100 text-yellow-800'
  },
];

const AI_VOICES = [
  { id: 'alloy', name: 'Alloy', description: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å' },
  { id: 'echo', name: 'Echo', description: '–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å' },
  { id: 'fable', name: 'Fable', description: '–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å' },
  { id: 'onyx', name: 'Onyx', description: '–ì–ª—É–±–æ–∫–∏–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å' },
  { id: 'nova', name: 'Nova', description: '–ú–æ–ª–æ–¥–æ–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å' },
  { id: 'shimmer', name: 'Shimmer', description: '–ú—è–≥–∫–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å' },
];

export default function QuizSettings() {
  const [, setLocation] = useLocation();
  const [selectedTemplate, setSelectedTemplate] = useState<string>('blank');

  const form = useForm<QuizSettings>({
    resolver: zodResolver(quizSettingsSchema),
    defaultValues: {
      title: '',
      description: '',
      template: 'blank',
      minPlayers: 2,
      maxPlayers: 20,
      timeLimit: 30,
      useAudioNarration: false,
      aiVoice: 'alloy',
      isPublic: false,
      questionTemplate: 'classic',
    },
  });

  const onSubmit = async (data: QuizSettings) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    localStorage.setItem('quizSettings', JSON.stringify(data));
    setLocation('/constructor');
  };

  const selectedTemplateData = QUIZ_TEMPLATES.find(t => t.id === selectedTemplate);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950">
      <div className="max-w-4xl mx-auto p-4">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-4">
            <Button
              onClick={() => setLocation('/')}
              variant="ghost"
              size="sm"
              className="gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              –ù–∞–∑–∞–¥
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–≤–∏–∑–∞
              </h1>
              <p className="text-gray-600 dark:text-gray-300">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–≤–∏–∑–∞
              </p>
            </div>
          </div>
        </div>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            {/* Basic Information */}
            <Card className="bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="w-5 h-5" />
                  –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <FormField
                  control={form.control}
                  name="title"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∏–∑–∞"
                          rows={3}
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </CardContent>
            </Card>

            {/* Template Selection */}
            <Card className="bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Layout className="w-5 h-5" />
                  –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {QUIZ_TEMPLATES.map((template) => (
                    <div
                      key={template.id}
                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                        selectedTemplate === template.id
                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => {
                        setSelectedTemplate(template.id);
                        form.setValue('template', template.id);
                      }}
                    >
                      <div className="text-center">
                        <div className="text-3xl mb-2">{template.icon}</div>
                        <h3 className="font-semibold text-sm mb-1">{template.name}</h3>
                        <p className="text-xs text-gray-600 dark:text-gray-400">
                          {template.description}
                        </p>
                        <Badge className={`mt-2 ${template.color}`}>
                          {template.name}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Game Settings */}
            <Card className="bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="w-5 h-5" />
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <FormField
                    control={form.control}
                    name="minPlayers"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ú–∏–Ω–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤</FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            min="1"
                            max="100"
                            {...field}
                            onChange={(e) => field.onChange(Number(e.target.value))}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="maxPlayers"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤</FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            min="1"
                            max="100"
                            {...field}
                            onChange={(e) => field.onChange(Number(e.target.value))}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="timeLimit"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å (—Å–µ–∫)</FormLabel>
                        <FormControl>
                          <Input
                            type="number"
                            min="5"
                            max="300"
                            {...field}
                            onChange={(e) => field.onChange(Number(e.target.value))}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <FormField
                  control={form.control}
                  name="isPublic"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>–ü—É–±–ª–∏—á–Ω—ã–π –∫–≤–∏–∑</FormLabel>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –∏–≥—Ä–∞—Ç—å –≤ –≤–∞—à –∫–≤–∏–∑
                        </p>
                      </div>
                    </FormItem>
                  )}
                />
              </CardContent>
            </Card>

            {/* AI Settings */}
            <Card className="bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-0 shadow-lg">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Mic className="w-5 h-5" />
                  –ò–ò –æ–∑–≤—É—á–∫–∞ (OpenAI)
                  <Badge variant="secondary" className="ml-2">
                    <Sparkles className="w-3 h-3 mr-1" />
                    –ü—Ä–µ–º–∏—É–º
                  </Badge>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <FormField
                  control={form.control}
                  name="useAudioNarration"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                      <FormControl>
                        <Checkbox
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>–í–∫–ª—é—á–∏—Ç—å –ò–ò –æ–∑–≤—É—á–∫—É</FormLabel>
                        <p className="text-sm text-gray-600 dark:text-gray-400">
                          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI TTS
                        </p>
                      </div>
                    </FormItem>
                  )}
                />

                {form.watch('useAudioNarration') && (
                  <FormField
                    control={form.control}
                    name="aiVoice"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ì–æ–ª–æ—Å –¥–∏–∫—Ç–æ—Ä–∞</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {AI_VOICES.map((voice) => (
                              <SelectItem key={voice.id} value={voice.id}>
                                <div className="flex flex-col">
                                  <span className="font-medium">{voice.name}</span>
                                  <span className="text-xs text-gray-500">{voice.description}</span>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                )}
              </CardContent>
            </Card>

            {/* Action Buttons */}
            <div className="flex justify-between items-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setLocation('/')}
                className="gap-2"
              >
                <ArrowLeft className="w-4 h-4" />
                –û—Ç–º–µ–Ω–∞
              </Button>
              
              <Button type="submit" className="gap-2">
                –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
                <ArrowRight className="w-4 h-4" />
              </Button>
            </div>
          </form>
        </Form>
      </div>
    </div>
  );
}